{"version":3,"file":"component---node-modules-gatsby-theme-code-notes-src-templates-tag-page-js-024df2b274326dad021a.js","mappings":"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","sources":["webpack://gatsby-starter-code-notes/./node_modules/gatsby-theme-code-notes/src/components/NoteList/SortButton.tsx","webpack://gatsby-starter-code-notes/./node_modules/gatsby-theme-code-notes/src/components/NoteList/useSortableData.ts","webpack://gatsby-starter-code-notes/./node_modules/@hookit/local-storage/esm/useLocalStorage.js","webpack://gatsby-starter-code-notes/./node_modules/gatsby-theme-code-notes/src/components/NoteList/NoteList.tsx","webpack://gatsby-starter-code-notes/./node_modules/gatsby-theme-code-notes/src/components/NotesPage/NotesPage.tsx","webpack://gatsby-starter-code-notes/./node_modules/gatsby-theme-code-notes/src/templates/TagPage.js"],"sourcesContent":["import React, { Fragment } from 'react'\nimport { Button } from 'theme-ui'\nimport { BiSortDown, BiSortUp } from 'react-icons/bi'\n\nconst getClassNamesFor = (name, sortConfig) => {\n  if (!sortConfig) {\n    return\n  }\n  return sortConfig.key === name ? `active ${sortConfig.direction}` : undefined\n}\n\nexport const SortButton = ({ requestSort, sortKey, sortConfig, children }) => (\n  <Button\n    variant=\"sort\"\n    type=\"button\"\n    onClick={() => requestSort(sortKey)}\n    className={getClassNamesFor(sortKey, sortConfig)}\n  >\n    {children}\n    {sortConfig.key === sortKey && (\n      <Fragment>\n        {sortConfig.direction === 'descending' ? (\n          <BiSortDown\n            sx={{\n              color: 'inherit',\n              pointerEvents: 'none',\n            }}\n            size=\"15px\"\n          />\n        ) : (\n          <BiSortUp\n            sx={{\n              color: 'inherit',\n              pointerEvents: 'none',\n            }}\n            size=\"15px\"\n          />\n        )}\n      </Fragment>\n    )}\n  </Button>\n)\n","import { useLocalStorage } from '@hookit/local-storage'\nimport { useMemo } from 'react'\n\nexport const useSortableData = (items, config = null) => {\n  const [sortConfig, setSortConfig] = useLocalStorage(\n    'codeNotesSortConfig',\n    config\n  )\n\n  const sortedItems = useMemo(() => {\n    let sortableItems = [...items]\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (\n          a.node.frontmatter[sortConfig.key]?.toLowerCase() <\n          b.node.frontmatter[sortConfig.key]?.toLowerCase()\n        ) {\n          return sortConfig.direction === 'ascending' ? -1 : 1\n        }\n        if (\n          a.node.frontmatter[sortConfig.key]?.toLowerCase() >\n          b.node.frontmatter[sortConfig.key]?.toLowerCase()\n        ) {\n          return sortConfig.direction === 'ascending' ? 1 : -1\n        }\n        return 0\n      })\n    }\n    return sortableItems\n  }, [items, sortConfig])\n\n  const requestSort = (key) => {\n    let direction = 'ascending'\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === 'ascending'\n    ) {\n      direction = 'descending'\n    }\n    setSortConfig({ key, direction })\n  }\n\n  return { items: sortedItems, requestSort, sortConfig }\n}\n","import _slicedToArray from \"/home/runner/work/openshift-compendium/openshift-compendium/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nexport function useLocalStorage(key, initialValue) {\n  var _React$useState = React.useState(function () {\n    try {\n      var item = window.localStorage.getItem(key);\n\n      if (item) {\n        var test = item.match(/^(\\[|\\{|\\d).*(\\]|\\}|\\d)?$/gm);\n\n        if (test && test.length) {\n          return JSON.parse(item);\n        } else {\n          return item;\n        }\n      } else {\n        return initialValue;\n      }\n    } catch (error) {\n      return initialValue;\n    }\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      storedValue = _React$useState2[0],\n      setStoredValue = _React$useState2[1];\n\n  var setValue = React.useCallback(function (value) {\n    try {\n      setStoredValue(value);\n\n      if (typeof value === 'object') {\n        window.localStorage.setItem(key, JSON.stringify(value));\n      } else {\n        window.localStorage.setItem(key, value);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }, [key]);\n  return [storedValue, setValue];\n}","import React, { Fragment, FunctionComponent } from 'react'\nimport { Flex } from 'theme-ui'\nimport { NoteListItem } from '../NoteListItem'\nimport { SortButton } from './SortButton'\nimport { useSortableData } from './useSortableData'\nimport slugify from '@alexcarpenter/slugify'\n\ninterface NoteListProps {\n  notes: any[]\n}\n\nexport const NoteList: FunctionComponent<NoteListProps> = ({ notes }) => {\n  const { items, requestSort, sortConfig } = useSortableData(notes, {\n    key: 'title',\n    direction: 'ascending',\n  })\n\n  return (\n    <Fragment>\n      <Flex\n        sx={{\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n          mb: 2,\n        }}\n      >\n        <SortButton\n          requestSort={requestSort}\n          sortKey=\"title\"\n          sortConfig={sortConfig}\n        >\n          A-Z\n        </SortButton>\n        <SortButton\n          requestSort={requestSort}\n          sortKey=\"modifiedTimestamp\"\n          sortConfig={sortConfig}\n        >\n          Date\n        </SortButton>\n      </Flex>\n\n      {items.map(({ node }) => {\n        const {\n          title,\n          tags,\n          emoji,\n          modified,\n          modifiedTimestamp,\n        } = node.frontmatter\n        const slug = `/${slugify(node.fields.slug)}`\n        return (\n          <NoteListItem\n            title={title}\n            emoji={emoji}\n            tags={tags}\n            slug={slug}\n            key={slug}\n            dateModified={modified}\n            modifiedTimestamp={modifiedTimestamp}\n          />\n        )\n      })}\n    </Fragment>\n  )\n}\n","/** @jsx jsx */\nimport { jsx, Heading } from 'theme-ui'\nimport { Fragment } from 'react'\nimport { NoteList } from '../NoteList'\nimport { Layout } from '../Layout'\nimport { useSiteMetadata } from '../../use-site-metadata'\nimport { TagDot } from '../TagDot'\n\nexport const NotesPage = ({ data, pageContext, location }) => {\n  const notes = data.allMdx.edges\n  const { title } = useSiteMetadata()\n  const siteTitle = title\n\n  return (\n    <Layout\n      activeTag={pageContext.tag}\n      path={location.pathname}\n      basePath={pageContext.basePath}\n      hasUntagged={pageContext.hasUntagged}\n      tags={pageContext.tags}\n      title={pageContext.tag ? `Tag: ${pageContext.tag}` : siteTitle}\n    >\n      {pageContext.tag && (\n        <Heading as=\"h1\" variant=\"noteTitle\">\n          {pageContext.tag !== 'untagged' ? (\n            <Fragment>\n              <TagDot tag={pageContext.tag} size=\"0.5em\" /> {pageContext.tag}\n            </Fragment>\n          ) : (\n            <Fragment>Untagged Notes</Fragment>\n          )}\n        </Heading>\n      )}\n      <NoteList notes={notes} />\n    </Layout>\n  )\n}\n","import { graphql } from 'gatsby'\nimport { NotesPage } from '../components/NotesPage'\n\nexport default NotesPage\n\nexport const pageQuery = graphql`\n  query($tag: String!) {\n    allMdx(\n      sort: { fields: frontmatter___title, order: ASC }\n      filter: { frontmatter: { tags: { eq: $tag } } }\n    ) {\n      edges {\n        node {\n          id\n          ...AllPages\n        }\n      }\n    }\n  }\n`\n"],"names":["getClassNamesFor","name","sortConfig","key","direction","undefined","SortButton","requestSort","sortKey","children","variant","type","onClick","className","Fragment","sx","color","pointerEvents","size","useSortableData","items","config","initialValue","_React$useState","_React$useState2","storedValue","setStoredValue","item","window","localStorage","getItem","test","match","length","JSON","parse","error","value","setItem","stringify","console","setSortConfig","useMemo","sortableItems","sort","a","b","node","frontmatter","toLowerCase","NoteList","notes","justifyContent","alignItems","mb","map","title","tags","emoji","modified","modifiedTimestamp","slug","slugify","fields","NoteListItem","dateModified","NotesPage","data","pageContext","location","allMdx","edges","siteTitle","useSiteMetadata","Layout","activeTag","tag","path","pathname","basePath","hasUntagged","as","TagDot"],"sourceRoot":""}